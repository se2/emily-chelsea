{"version":3,"file":"dist/css/components/buttons.css","mappings":"AAEA;EACC;EACA;AADD;AAEC;EACC;AAAF;AACE;EACC;AACH;;AAIA;ECZC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EDEA;AAWD;AEqCI;EFlDJ;IAIE;EAaA;AACF;AEgCI;EFlDJ;IAOE;EAeA;AACF;;AAZA;ECIC;EACA;EACA;EACA;ADYD;;AAfA;ECPC;EACA;EACA;EACA;AD0BD;;AAlBA;ECfC;ADqCD;;AAlBA;ECDC;EACA;EACA;ADuBD;ACtBC;EACC;EACA;EACA;ADwBF;AA3BC;EC2BA;EACA;EACA;ADGD;ACFC;EACC;EACA;EACA;ADIF;;AAhCA;ECGC;EACA;EACA;ADiCD;AChCC;EACC;EACA;ADkCF;AAxCC;ECWA;EACA;ADgCD;AC/BC;EACC;EACA;ADiCF;;AA3CA;ECmCC;EACA;ADYD;ACXC;EACC;EACA;ADaF;;AAhDA;ECsBC;EACA;AD8BD;AC7BC;EACC;EACA;AD+BF;;AArDA;EACC;EACA;AAwDD;AErDI;EFLJ;IAIE;IACA;EA0DA;AACF;AE3DI;EFLJ;IAQE;IACA;EA4DA;AACF;AA3DC;EACC;EACA;AA6DF;AA5DE;EACC;EACA;AA8DH;AA3DC;EACC;EACA;EACA;AA6DF;AA5DE;EACC;EACA;AA8DH,C","sources":["webpack://src/./assets/scss/components/buttons.scss","webpack://src/./assets/scss/_mixin.scss","webpack://src/./node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"sourcesContent":["@import \"../base-components\";\n\n.ttg-buttons {\n\toverflow: hidden;\n\twidth: 100%;\n\t&__inner {\n\t\tmargin: -5px;\n\t\t.btn {\n\t\t\tmargin: 5px;\n\t\t}\n\t}\n}\n\n.btn {\n\t@include button-base;\n\twidth: var(--ttg-button-width-mobile);\n\t@include media-breakpoint-up(md) {\n\t\twidth: var(--ttg-button-width-tablet);\n\t}\n\t@include media-breakpoint-up(lg) {\n\t\twidth: var(--ttg-button-width-pc);\n\t}\n}\n\n.btn--small {\n\t@include button-size-small;\n}\n\n.btn--medium {\n\t@include button-size-medium;\n}\n\n.btn--large {\n\t@include button-size-large;\n}\n\n.btn--solid {\n\t@include button-solid;\n\t&.btn--white {\n\t\t@include button-solid-white;\n\t}\n}\n\n.btn--outline {\n\t@include button-outline;\n\t&.btn--white {\n\t\t@include button-outline-white;\n\t}\n}\n\n.btn--secondary-solid {\n\t@include button-solid-secondary;\n}\n\n.btn--secondary-outline {\n\t@include button-outline-secondary;\n}\n\n.btn-custom {\n\theight: var(--ttg-button-height-mobile);\n\tborder-width: var(--ttg-button-border_width-mobile);\n\t@include media-breakpoint-up(md) {\n\t\theight: var(--ttg-button-height-tablet);\n\t\tborder-width: var(--ttg-button-border_width-tablet);\n\t}\n\t@include media-breakpoint-up(lg) {\n\t\theight: var(--ttg-button-height-pc);\n\t\tborder-width: var(--ttg-button-border_width-pc);\n\t}\n\t&--solid {\n\t\tcolor: var(--ttg-button-text_color);\n\t\tbackground-color: var(--ttg-button-background_color);\n\t\t&:hover {\n\t\t\tcolor: var(--ttg-button-text_color_hover);\n\t\t\tbackground-color: var(--ttg-button-background_color_hover);\n\t\t}\n\t}\n\t&--outline {\n\t\tcolor: var(--ttg-button-text_color);\n\t\tbackground-color: transparent;\n\t\tborder-color: var(--ttg-button-background_color);\n\t\t&:hover {\n\t\t\tcolor: var(--ttg-button-text_color_hover);\n\t\t\tborder-color: var(--ttg-button-background_color);\n\t\t}\n\t}\n}\n","@mixin button-base {\n\tdisplay: inline-flex;\n\talign-items: center;\n\tjustify-content: center;\n\ttext-align: center;\n\ttext-decoration: none;\n\tpadding: 0 pxToRem(30);\n\tborder-radius: 34px;\n\tborder: 0;\n\tfont-size: 20px;\n\tfont-weight: bold;\n\tletter-spacing: 0.15em;\n\ttext-transform: uppercase;\n\ttransition: all 0.2s linear;\n}\n\n@mixin button-size-large {\n\theight: 68px;\n}\n\n@mixin button-size-medium {\n\theight: 56px;\n\tfont-size: pxToRem(18);\n\tborder-width: 1px !important;\n\tpadding: 0 pxToRem(15);\n}\n\n@mixin button-size-small {\n\theight: 49px;\n\tfont-size: pxToRem(14);\n\tborder-width: 1px !important;\n\tpadding: 0 pxToRem(15);\n}\n\n@mixin button-solid {\n\tborder: 2px solid var(--cl-primary);\n\tbackground: var(--cl-primary);\n\tcolor: #fff;\n\t&:hover {\n\t\tbackground-color: #000;\n\t\tborder-color: #000;\n\t\tcolor: #fff;\n\t}\n}\n\n@mixin button-outline {\n\tborder: 2px solid var(--cl-primary);\n\tbackground: transparent;\n\tcolor: var(--cl-primary);\n\t&:hover {\n\t\tborder-color: #000;\n\t\tcolor: #000;\n\t}\n}\n\n@mixin button-outline-white {\n\tborder-color: #fff;\n\tcolor: #fff;\n\t&:hover {\n\t\tbackground-color: #fff;\n\t\tcolor: #000;\n\t}\n}\n\n@mixin button-solid-white {\n\tbackground-color: #fff;\n\tborder-color: #fff;\n\tcolor: #000;\n\t&:hover {\n\t\tbackground-color: #000;\n\t\tborder-color: #000;\n\t\tcolor: #fff;\n\t}\n}\n\n@mixin button-outline-secondary {\n\tborder-color: var(--cl-secondary);\n\tcolor: var(--cl-secondary);\n\t&:hover {\n\t\tborder-color: #000;\n\t\tcolor: #000;\n\t}\n}\n\n@mixin button-solid-secondary {\n\tbackground-color: var(--cl-secondary);\n\tcolor: #fff;\n\t&:hover {\n\t\tbackground-color: #000;\n\t\tcolor: #fff;\n\t}\n}\n\n@mixin heading-xsmall {\n\tfont-size: pxToRem(20);\n\tline-height: 1.16;\n\t@include media-breakpoint-up(md) {\n\t\tfont-size: pxToRem(30);\n\t}\n}\n\n@mixin heading-small {\n\tfont-size: pxToRem(24);\n\tline-height: 1.16;\n\t@include media-breakpoint-up(md) {\n\t\tfont-size: pxToRem(36);\n\t}\n}\n\n@mixin heading-medium {\n\tfont-size: pxToRem(24);\n\tline-height: 1.16;\n\t@include media-breakpoint-up(md) {\n\t\tfont-size: pxToRem(48);\n\t}\n}\n\n@mixin heading-large {\n\tfont-size: pxToRem(40);\n\tline-height: 1.16;\n\t@include media-breakpoint-up(md) {\n\t\tfont-size: pxToRem(60);\n\t}\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}