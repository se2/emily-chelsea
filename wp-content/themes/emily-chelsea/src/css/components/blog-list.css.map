{"version":3,"file":"dist/css/components/blog-list.css","mappings":"AAEA;EAEC;AAFD;AAGC;EACC;AADF;AC0DI;ED1DH;IAGE;EACD;AACF;ACqDI;EDnDF;IAEE;IACA;EAAF;AACF;AC+CI;ED1CD;IAEE;EAHH;AACF;AC0CI;EDnCD;IAEE;EALH;AACF;;AAWA;EAEC;EACA;AATD;AAUC;EACC;EACA;EACA;EACA;AARF;AC0BI;EDtBH;IAME;EAND;AACF;AAQC;EACC;EACA;EACA;EACA;EACA;EACA;EACA;AANF;ACYI;EDbH;IASE;EAJD;AACF;AAKE;EACC;EACA;EACA;EACA;EACA;AAHH;AAMC;EACC;EACA;AAJF;ACJI;EDMH;IAIE;EAFD;AACF;AAIC;EACC;AAFF;AAIC;EACC;AAFF;AAIC;EACC;EACA;EACA;AAFF;ACpBI;EDmBH;IAKE;EAAD;AACF;AAIG;EACC;AAFJ;AAIG;EACC;AAFJ;AAQG;EACC;AANJ;AClCI;EDuCD;IAGE;EAJH;AACF;AAMG;EACC;AAJJ;AC1CI;ED6CD;IAGE;EAFH;AACF;AAMC;EACC;EACA;AAJF,C","sources":["webpack://src/./assets/scss/components/blog-list.scss","webpack://src/./node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"sourcesContent":["@import \"../base-components\";\n\n.blog-list {\n\t$this: &;\n\twidth: 100%;\n\t&__inner {\n\t\tmargin: pxToRem(-20) pxToRem(-8);\n\t\t@include media-breakpoint-up(md) {\n\t\t\tmargin: pxToRem(-40) pxToRem(-15);\n\t\t}\n\t}\n\t&.columns-3 {\n\t\t.post-item {\n\t\t\t@include media-breakpoint-up(md) {\n\t\t\t\tflex: 0 0 33.3333%;\n\t\t\t\tmax-width: 33.3333%;\n\t\t\t}\n\t\t}\n\t}\n\t&.gutter-large {\n\t\t#{$this} {\n\t\t\t&__inner {\n\t\t\t\t@include media-breakpoint-up(md) {\n\t\t\t\t\tmargin: pxToRem(-24) pxToRem(-25);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t.post-item {\n\t\t\t&__inner {\n\t\t\t\t@include media-breakpoint-up(md) {\n\t\t\t\t\tpadding: pxToRem(24) pxToRem(25);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n.post-item {\n\t$this: &;\n\tflex: 0 0 50%;\n\tmax-width: 50%;\n\t&__inner {\n\t\tpadding: pxToRem(20) pxToRem(8);\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\theight: 100%;\n\t\t@include media-breakpoint-up(md) {\n\t\t\tpadding: pxToRem(40) pxToRem(15);\n\t\t}\n\t}\n\t&__thumbnail {\n\t\tpadding-top: 66%;\n\t\tbackground: var(--cl-background-image);\n\t\tmargin: 0 0 pxToRem(15) 0;\n\t\tposition: relative;\n\t\topacity: 0.75;\n\t\ttransition: opacity 0.2s linear;\n\t\twill-change: opacity;\n\t\t@include media-breakpoint-up(md) {\n\t\t\tmargin: 0 0 pxToRem(30) 0;\n\t\t}\n\t\timg {\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t}\n\t}\n\t&__title {\n\t\tmargin: 0 0 pxToRem(8) 0;\n\t\ttransition: opacity 0.2s linear;\n\t\t@include media-breakpoint-up(md) {\n\t\t\tmargin: 0 0 pxToRem(18) 0;\n\t\t}\n\t}\n\t&__desc {\n\t\tmargin: 0 0 pxToRem(20) 0;\n\t}\n\t&__link {\n\t\ttext-decoration: none;\n\t}\n\t&__cat {\n\t\tborder-top: 2px solid var(--cl-border);\n\t\tmargin-top: auto;\n\t\tpadding: pxToRem(8) 0 0 0;\n\t\t@include media-breakpoint-up(md) {\n\t\t\tpadding: pxToRem(18) 0 0 0;\n\t\t}\n\t}\n\t&:hover {\n\t\t#{$this} {\n\t\t\t&__thumbnail {\n\t\t\t\topacity: 1;\n\t\t\t}\n\t\t\t&__title {\n\t\t\t\tcolor: var(--cl-primary);\n\t\t\t}\n\t\t}\n\t}\n\t&--style-2 {\n\t\t#{$this} {\n\t\t\t&__title {\n\t\t\t\tcolor: #3f7f88;\n\t\t\t\t@include media-breakpoint-up(md) {\n\t\t\t\t\tmargin: 0 0 pxToRem(8) 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t&__thumbnail {\n\t\t\t\tpadding-top: 100%;\n\t\t\t\t@include media-breakpoint-up(md) {\n\t\t\t\t\tmargin: 0 0 pxToRem(15) 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t&__line {\n\t\tborder-top: 2px solid var(--cl-border);\n\t\tmargin-top: auto;\n\t}\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}