{"version":3,"file":"dist/css/components/content-with-image-2.css","mappings":"AAEA;EAEC;EACA;EACA;AAFD;AC2DI;ED7DJ;IAME;IACA;IACA;EAAA;AACF;AAEE;EACC;EACA;AAAH;AAEE;EACC;EACA;EACA;EACA;EACA;KAAA;AAAH;ACyCI;EDnDH;IAaE;IACA;EACD;AACF;AACC;EACC;EACA;AACF;AAAE;EACC;EACA;EACA;EACA;EACA;EACA;AAEH;AADG;EACC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAGJ;ACYI;EDxBD;IAWE;IACA;YAAA;EAKH;AACF;AAAG;;;;;;EAMC;AAEJ;ACFI;ED/BF;IAkCE;IACA;IACA;EAGF;AACF;AADG;EACC;EACA;AAGJ;ACbI;EDQD;IAIE;IACA;EAKH;AACF;ACnBI;EDlCH;IAoDE;IACA;IACA;IACA;EAKD;AACF;AC3BI;ED0BC;IAEE;EAGL;AACF;AChCI;EDqCC;IAEE;EAHL;AACF;ACrCI;EDgDC;IAEE;IACA;EATL;AACF;AC3CI;ED4DC;IAEE;IACA;EAfL;AACF;ACjDI;EDyEC;IAEE;IACA;EAtBL;AACF;ACvDI;EDsFC;IAEE;IACA;EA7BL;AACF;AC7DI;EDgGF;IAEE;EAjCF;AACF;AClEI;EDqGF;IAEE;EAjCF;AACF,C","sources":["webpack://src/./assets/scss/components/content-with-image-2.scss","webpack://src/./node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"sourcesContent":["@import \"../base-components\";\n\n.ttg-content-with-image-2 {\n\t$this: &;\n\tpadding-left: pxToRem(15);\n\tpadding-right: pxToRem(15);\n\twidth: 100%;\n\t@include media-breakpoint-up(md) {\n\t\tdisplay: flex;\n\t\tpadding-left: 0;\n\t\tpadding-right: 0;\n\t}\n\t&__image {\n\t\t&__inner {\n\t\t\theight: var(--ttg-content-with-image-bg-height, auto);\n\t\t\tmax-height: var(--ttg-content-with-image-bg-max-height, 100%);\n\t\t}\n\t\timg {\n\t\t\tdisplay: block;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tmax-height: inherit;\n\t\t\tobject-fit: cover;\n\t\t}\n\t\t@include media-breakpoint-up(md) {\n\t\t\tflex: 0 0 100%;\n\t\t\tmax-width: 100%;\n\t\t}\n\t}\n\t&__content {\n\t\tposition: relative;\n\t\tz-index: 2;\n\t\t&__inner {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tjustify-content: center;\n\t\t\tposition: relative;\n\t\t\tcolor: #fff;\n\t\t\tpadding: pxToRem(20) pxToRem(20);\n\t\t\t&:before {\n\t\t\t\tcontent: \"\";\n\t\t\t\tdisplay: block;\n\t\t\t\tposition: absolute;\n\t\t\t\tleft: 0px;\n\t\t\t\ttop: 0px;\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 100%;\n\t\t\t\tbackground: var(--ttg-content-with-image-2-bg-color-m);\n\t\t\t\tz-index: 0;\n\t\t\t\t@include media-breakpoint-up(md) {\n\t\t\t\t\tbackground: var(--ttg-content-with-image-2-bg-color);\n\t\t\t\t\tbackdrop-filter: blur(\n\t\t\t\t\t\tvar(--ttg-content-with-image-2-bg-blur)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\th1,\n\t\t\th2,\n\t\t\th3,\n\t\t\th4,\n\t\t\th5,\n\t\t\th6 {\n\t\t\t\tcolor: inherit;\n\t\t\t}\n\t\t\t@include media-breakpoint-up(md) {\n\t\t\t\twidth: var(--ttg-content-with-image-2-outer-width, 600px);\n\t\t\t\tmax-width: 100%;\n\t\t\t\tpadding: pxToRem(55) pxToRem(45);\n\t\t\t}\n\n\t\t\t& > .ttg-post {\n\t\t\t\tposition: relative;\n\t\t\t\tz-index: 2;\n\t\t\t\t@include media-breakpoint-up(md) {\n\t\t\t\t\twidth: var(--ttg-content-with-image-2-width, 300px);\n\t\t\t\t\tmax-width: 100%;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t@include media-breakpoint-up(md) {\n\t\t\tflex: 0 0 100%;\n\t\t\tmax-width: 100%;\n\t\t\ttransform: translateX(-100%);\n\t\t\tdisplay: flex;\n\t\t}\n\t\t&--right {\n\t\t\t#{$this} {\n\t\t\t\t&__content {\n\t\t\t\t\t&__inner {\n\t\t\t\t\t\t@include media-breakpoint-up(md) {\n\t\t\t\t\t\t\talign-items: flex-end;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t&--center {\n\t\t\t#{$this} {\n\t\t\t\t&__content {\n\t\t\t\t\t&__inner {\n\t\t\t\t\t\t@include media-breakpoint-up(md) {\n\t\t\t\t\t\t\talign-items: center;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t&--left-top {\n\t\t\t#{$this} {\n\t\t\t\t&__content {\n\t\t\t\t\t&__inner {\n\t\t\t\t\t\t@include media-breakpoint-up(md) {\n\t\t\t\t\t\t\talign-items: flex-start;\n\t\t\t\t\t\t\tjustify-content: flex-start;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t&--right-top {\n\t\t\t#{$this} {\n\t\t\t\t&__content {\n\t\t\t\t\t&__inner {\n\t\t\t\t\t\t@include media-breakpoint-up(md) {\n\t\t\t\t\t\t\talign-items: flex-end;\n\t\t\t\t\t\t\tjustify-content: flex-start;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t&--left-bottom {\n\t\t\t#{$this} {\n\t\t\t\t&__content {\n\t\t\t\t\t&__inner {\n\t\t\t\t\t\t@include media-breakpoint-up(md) {\n\t\t\t\t\t\t\talign-items: flex-start;\n\t\t\t\t\t\t\tjustify-content: flex-end;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t&--right-bottom {\n\t\t\t#{$this} {\n\t\t\t\t&__content {\n\t\t\t\t\t&__inner {\n\t\t\t\t\t\t@include media-breakpoint-up(md) {\n\t\t\t\t\t\t\talign-items: flex-end;\n\t\t\t\t\t\t\tjustify-content: flex-end;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t&--outer-right {\n\t\t\t@include media-breakpoint-up(md) {\n\t\t\t\tjustify-content: flex-end;\n\t\t\t}\n\t\t}\n\t\t&--outer-center {\n\t\t\t@include media-breakpoint-up(md) {\n\t\t\t\tjustify-content: center;\n\t\t\t}\n\t\t}\n\t}\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}