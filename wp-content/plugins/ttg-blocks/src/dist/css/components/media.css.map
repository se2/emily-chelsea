{"version":3,"file":"dist/css/components/media.css","mappings":"AAEA;EAEC;EACA;EACA;EACA;EACA;AAFD;AAGC;EACC;EACA;EACA;EACA;EACA;EACA;EACA;AADF;AAIE;EACC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAFH;AAQG;EACC;EACA;EACA;EACA;EACA;AANJ;AAWE;EACC;AATH;AAYC;EACC;EACA;EACA;AAVF;AAWE;EACC;EACA;EACA;EACA;EACA;EACA;EACA;AATH;AAaC;EACC;EACA;EACA;EACA;EACA;AAXF;AAYE;EACC;EACA;EACA;EACA;KAAA;EACA;AAVH;AAaC;EACC;EACA;EACA;EACA;EACA;EACA;AAXF;AAYE;EACC;EACA;AAVH;AAaE;EACC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAXH;AAYG;EACC;EACA;EACA;AAVJ;AAaG;EACC;AAXJ;AClCI;ED4BF;IAqBE;IACA;EAXF;EAYE;IACC;EAVH;AACF;AAeC;EACC;EACA;EACA;EACA;EACA;EACA;EACA;AAbF;AAeE;EACC;EACA;AAbH;AAcG;EAEC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAbJ;AAgBE;;EAEC;EACA;EACA;KAAA;AAdH;AAiBC;EACC;EACA;AAfF;AAoBG;EACC;EACA;AAlBJ;AAoBG;EACC;AAlBJ;AAoBG;EACC;AAlBJ;AAoBK;EACC;AAlBN;AAoBK;EACC;AAlBN;AAyBI;EACC;AAvBL,C","sources":["webpack://src/./assets/scss/components/media.scss","webpack://src/./node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"sourcesContent":["@import \"../base-components\";\n\n.ttg-media {\n\t$this: &;\n\tbackground-color: var(--cl-primary);\n\twidth: 100%;\n\theight: 100%;\n\tmax-height: inherit;\n\tposition: relative;\n\t&__center {\n\t\twidth: 2px;\n\t\theight: 2px;\n\t\ttop: 50%;\n\t\tleft: 50%;\n\t\tposition: absolute;\n\t\ttransform: translate(-50%, -50%);\n\t\topacity: 0;\n\t}\n\t&.loading {\n\t\t&:before {\n\t\t\tposition: absolute;\n\t\t\tcontent: \"loading...\";\n\t\t\tfont-size: 30px;\n\t\t\tcolor: #fff;\n\t\t\ttext-transform: uppercase;\n\t\t\tdisplay: block;\n\t\t\ttop: 50%;\n\t\t\tleft: 50%;\n\t\t\ttransform: translate(-50%, -50%);\n\t\t\tletter-spacing: 0.05em;\n\t\t\tz-index: 5;\n\t\t}\n\t}\n\n\t&--no-poster {\n\t\t#{$this} {\n\t\t\t&__video-wrapper {\n\t\t\t\tposition: relative;\n\t\t\t\topacity: 1;\n\t\t\t\theight: 100%;\n\t\t\t\twidth: 100%;\n\t\t\t\taspect-ratio: 16/9;\n\t\t\t}\n\t\t}\n\t}\n\t&--no-video {\n\t\t&::before {\n\t\t\tdisplay: none !important;\n\t\t}\n\t}\n\t&__inner {\n\t\tposition: relative;\n\t\theight: 100%;\n\t\tmax-height: inherit;\n\t\t&:before {\n\t\t\tcontent: \"\";\n\t\t\tz-index: 2;\n\t\t\tposition: absolute;\n\t\t\ttop: 0px;\n\t\t\tright: 0px;\n\t\t\tbottom: 0px;\n\t\t\tleft: 0px;\n\t\t}\n\t}\n\n\t&__poster {\n\t\tposition: relative;\n\t\tz-index: 2;\n\t\ttransition: opacity 0.2s linear;\n\t\theight: 100%;\n\t\tmax-height: inherit;\n\t\timg {\n\t\t\tdisplay: block;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tobject-fit: cover;\n\t\t\tmax-height: inherit;\n\t\t}\n\t}\n\t&__play {\n\t\tcursor: pointer;\n\t\tposition: absolute;\n\t\ttop: 50%;\n\t\tleft: 50%;\n\t\ttransform: translate(-50%, -50%);\n\t\tz-index: 5;\n\t\t&.disabled {\n\t\t\tcursor: not-allowed;\n\t\t\topacity: 0.7;\n\t\t}\n\n\t\t&__icon {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t\twidth: 40px;\n\t\t\theight: 40px;\n\t\t\tborder-radius: 100%;\n\t\t\toverflow: hidden;\n\t\t\tbackground: #fff;\n\t\t\tbox-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);\n\t\t\tsvg {\n\t\t\t\tdisplay: block;\n\t\t\t\twidth: 15px;\n\t\t\t\theight: auto;\n\t\t\t}\n\n\t\t\t&__pause {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\n\t\t\t@include media-breakpoint-up(lg) {\n\t\t\t\twidth: 48px;\n\t\t\t\theight: 48px;\n\t\t\t\tsvg {\n\t\t\t\t\twidth: 17px;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t&__video-wrapper {\n\t\tposition: absolute;\n\t\ttop: 0px;\n\t\tright: 0px;\n\t\tbottom: 0px;\n\t\tleft: 0px;\n\t\topacity: 0;\n\t\toverflow: hidden;\n\n\t\t&__inner {\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\t&[data-type=\"youtube\"],\n\t\t\t&[data-type=\"vimeo\"] {\n\t\t\t\tmin-height: 100%;\n\t\t\t\tmin-width: 100%;\n\t\t\t\twidth: auto;\n\t\t\t\theight: auto;\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: 50%;\n\t\t\t\tleft: 50%;\n\t\t\t\ttransform: translate(-50%, -50%);\n\t\t\t\taspect-ratio: 16 / 9;\n\t\t\t}\n\t\t}\n\t\tiframe,\n\t\tvideo {\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tobject-fit: cover;\n\t\t}\n\t}\n\t&__video {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n\n\t&.is-playing:not(.loading) {\n\t\t#{$this} {\n\t\t\t&__poster {\n\t\t\t\topacity: 0;\n\t\t\t\tvisibility: hidden;\n\t\t\t}\n\t\t\t&__video-wrapper {\n\t\t\t\topacity: 1;\n\t\t\t}\n\t\t\t&__play {\n\t\t\t\topacity: 0;\n\t\t\t\t&__icon {\n\t\t\t\t\t&__play {\n\t\t\t\t\t\tdisplay: none;\n\t\t\t\t\t}\n\t\t\t\t\t&__pause {\n\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t&:hover {\n\t\t\t#{$this} {\n\t\t\t\t&__play {\n\t\t\t\t\topacity: 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}